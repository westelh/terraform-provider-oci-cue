// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package vulnerability_scanning

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	oci_vulnerability_scanning "github.com/oracle/oci-go-sdk/v65/vulnerabilityscanning"

	"github.com/westelh/terraform-provider-oci-cue/internal/client"
	"github.com/westelh/terraform-provider-oci-cue/internal/tfresource"
)

func VulnerabilityScanningHostScanTargetErrorsDataSource() *schema.Resource {
	return &schema.Resource{
		Read: readVulnerabilityScanningHostScanTargetErrors,
		Schema: map[string]*schema.Schema{
			"filter": tfresource.DataSourceFiltersSchema(),
			"compartment_id": {
				Type:     schema.TypeString,
				Required: true,
			},
			"host_scan_target_id": {
				Type:     schema.TypeString,
				Required: true,
			},
			"state": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"host_scan_target_error_summary_collection": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"items": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									// Required

									// Optional

									// Computed
									"items": {
										Type:     schema.TypeList,
										Computed: true,
										Elem: &schema.Resource{
											Schema: map[string]*schema.Schema{
												// Required

												// Optional

												// Computed
												"defined_tags": {
													Type:     schema.TypeMap,
													Computed: true,
													Elem:     schema.TypeString,
												},
												"error_code": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"freeform_tags": {
													Type:     schema.TypeMap,
													Computed: true,
													Elem:     schema.TypeString,
												},
												"instance_id": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"message": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"state": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"system_tags": {
													Type:     schema.TypeMap,
													Computed: true,
													Elem:     schema.TypeString,
												},
												"task": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"time_updated": {
													Type:     schema.TypeString,
													Computed: true,
												},
												"vendor": {
													Type:     schema.TypeString,
													Computed: true,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

func readVulnerabilityScanningHostScanTargetErrors(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanTargetErrorsDataSourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).VulnerabilityScanningClient()

	return tfresource.ReadResource(sync)
}

type VulnerabilityScanningHostScanTargetErrorsDataSourceCrud struct {
	D      *schema.ResourceData
	Client *oci_vulnerability_scanning.VulnerabilityScanningClient
	Res    *oci_vulnerability_scanning.ListHostScanTargetErrorsResponse
}

func (s *VulnerabilityScanningHostScanTargetErrorsDataSourceCrud) VoidState() {
	s.D.SetId("")
}

func (s *VulnerabilityScanningHostScanTargetErrorsDataSourceCrud) Get() error {
	request := oci_vulnerability_scanning.ListHostScanTargetErrorsRequest{}

	if compartmentId, ok := s.D.GetOkExists("compartment_id"); ok {
		tmp := compartmentId.(string)
		request.CompartmentId = &tmp
	}

	if hostScanTargetId, ok := s.D.GetOkExists("host_scan_target_id"); ok {
		tmp := hostScanTargetId.(string)
		request.HostScanTargetId = &tmp
	}

	if state, ok := s.D.GetOkExists("state"); ok {
		request.LifecycleState = oci_vulnerability_scanning.ListHostScanTargetErrorsLifecycleStateEnum(state.(string))
	}

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(false, "vulnerability_scanning")

	response, err := s.Client.ListHostScanTargetErrors(context.Background(), request)
	if err != nil {
		return err
	}

	s.Res = &response
	request.Page = s.Res.OpcNextPage

	for request.Page != nil {
		listResponse, err := s.Client.ListHostScanTargetErrors(context.Background(), request)
		if err != nil {
			return err
		}

		s.Res.Items = append(s.Res.Items, listResponse.Items...)
		request.Page = listResponse.OpcNextPage
	}

	return nil
}

func (s *VulnerabilityScanningHostScanTargetErrorsDataSourceCrud) SetData() error {
	if s.Res == nil {
		return nil
	}

	s.D.SetId(tfresource.GenerateDataSourceHashID("VulnerabilityScanningHostScanTargetErrorsDataSource-", VulnerabilityScanningHostScanTargetErrorsDataSource(), s.D))
	resources := []map[string]interface{}{}
	hostScanTargetError := map[string]interface{}{}

	items := []interface{}{}
	for _, item := range s.Res.Items {
		items = append(items, HostScanTargetErrorSummaryToMap(item))
	}
	hostScanTargetError["items"] = items

	if f, fOk := s.D.GetOkExists("filter"); fOk {
		items = tfresource.ApplyFiltersInCollection(f.(*schema.Set), items, VulnerabilityScanningHostScanTargetErrorsDataSource().Schema["host_scan_target_error_summary_collection"].Elem.(*schema.Resource).Schema)
		hostScanTargetError["items"] = items
	}

	resources = append(resources, hostScanTargetError)
	if err := s.D.Set("host_scan_target_error_summary_collection", resources); err != nil {
		return err
	}

	return nil
}

func HostScanTargetErrorSummaryToMap(obj oci_vulnerability_scanning.HostScanTargetErrorSummary) map[string]interface{} {
	result := map[string]interface{}{}

	if obj.DefinedTags != nil {
		result["defined_tags"] = tfresource.DefinedTagsToMap(obj.DefinedTags)
	}

	if obj.ErrorCode != nil {
		result["error_code"] = string(*obj.ErrorCode)
	}

	result["freeform_tags"] = obj.FreeformTags
	result["freeform_tags"] = obj.FreeformTags

	if obj.InstanceId != nil {
		result["instance_id"] = string(*obj.InstanceId)
	}

	if obj.Message != nil {
		result["message"] = string(*obj.Message)
	}

	result["state"] = string(obj.LifecycleState)

	if obj.SystemTags != nil {
		result["system_tags"] = tfresource.SystemTagsToMap(obj.SystemTags)
	}

	if obj.Task != nil {
		result["task"] = string(*obj.Task)
	}

	if obj.TimeUpdated != nil {
		result["time_updated"] = obj.TimeUpdated.String()
	}

	result["vendor"] = string(obj.Vendor)

	return result
}
