// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package adm

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	oci_adm "github.com/oracle/oci-go-sdk/v65/adm"

	"github.com/westelh/terraform-provider-oci-cue/internal/client"
	"github.com/westelh/terraform-provider-oci-cue/internal/tfresource"
)

func AdmVulnerabilityAuditResource() *schema.Resource {
	return &schema.Resource{
		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},
		Timeouts: tfresource.DefaultTimeout,
		Create:   createAdmVulnerabilityAudit,
		Read:     readAdmVulnerabilityAudit,
		Update:   updateAdmVulnerabilityAudit,
		Delete:   deleteAdmVulnerabilityAudit,
		Schema: map[string]*schema.Schema{
			// Required
			"knowledge_base_id": {
				Type:     schema.TypeString,
				Required: true,
				ForceNew: true,
			},

			// Optional
			"application_dependencies": {
				Type:     schema.TypeList,
				Optional: true,
				Computed: true,
				ForceNew: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						// Required
						"node_id": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
						},

						// Optional
						"application_dependency_node_ids": {
							Type:     schema.TypeList,
							Optional: true,
							Computed: true,
							ForceNew: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"gav": {
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
							ForceNew: true,
						},
						"purl": {
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
							ForceNew: true,
						},

						// Computed
					},
				},
			},
			"build_type": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
			"compartment_id": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"configuration": {
				Type:     schema.TypeList,
				Optional: true,
				Computed: true,
				ForceNew: true,
				MaxItems: 1,
				MinItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						// Required

						// Optional
						"exclusions": {
							Type:     schema.TypeList,
							Optional: true,
							Computed: true,
							ForceNew: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"max_permissible_cvss_v2score": {
							Type:     schema.TypeFloat,
							Optional: true,
							Computed: true,
							ForceNew: true,
						},
						"max_permissible_cvss_v3score": {
							Type:     schema.TypeFloat,
							Optional: true,
							Computed: true,
							ForceNew: true,
						},
						"max_permissible_severity": {
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
							ForceNew: true,
						},

						// Computed
					},
				},
			},
			"defined_tags": {
				Type:             schema.TypeMap,
				Optional:         true,
				Computed:         true,
				DiffSuppressFunc: tfresource.DefinedTagsDiffSuppressFunction,
				Elem:             schema.TypeString,
			},
			"display_name": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
			},
			"freeform_tags": {
				Type:     schema.TypeMap,
				Optional: true,
				Computed: true,
				Elem:     schema.TypeString,
			},
			"source": {
				Type:     schema.TypeList,
				Optional: true,
				Computed: true,
				ForceNew: true,
				MaxItems: 1,
				MinItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						// Required
						"type": {
							Type:             schema.TypeString,
							Required:         true,
							ForceNew:         true,
							DiffSuppressFunc: tfresource.EqualIgnoreCaseSuppressDiff,
							ValidateFunc: validation.StringInSlice([]string{
								"EXTERNAL_RESOURCE",
								"OCI_RESOURCE",
								"UNKNOWN",
							}, true),
						},

						// Optional
						"description": {
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
							ForceNew: true,
						},
						"oci_resource_id": {
							Type:     schema.TypeString,
							Optional: true,
							Computed: true,
							ForceNew: true,
						},

						// Computed
					},
				},
			},
			"usage_data": {
				Type:     schema.TypeList,
				Optional: true,
				Computed: true,
				ForceNew: true,
				MaxItems: 1,
				MinItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						// Required
						"bucket": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
						},
						"namespace": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
						},
						"object": {
							Type:     schema.TypeString,
							Required: true,
							ForceNew: true,
						},
						"source_type": {
							Type:             schema.TypeString,
							Required:         true,
							ForceNew:         true,
							DiffSuppressFunc: tfresource.EqualIgnoreCaseSuppressDiff,
							ValidateFunc: validation.StringInSlice([]string{
								"objectStorageTuple",
							}, true),
						},

						// Optional

						// Computed
					},
				},
			},

			// Computed
			"is_success": {
				Type:     schema.TypeBool,
				Computed: true,
			},
			"lifecycle_details": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"max_observed_cvss_v2score": {
				Type:     schema.TypeFloat,
				Computed: true,
			},
			"max_observed_cvss_v2score_with_ignored": {
				Type:     schema.TypeFloat,
				Computed: true,
			},
			"max_observed_cvss_v3score": {
				Type:     schema.TypeFloat,
				Computed: true,
			},
			"max_observed_cvss_v3score_with_ignored": {
				Type:     schema.TypeFloat,
				Computed: true,
			},
			"max_observed_severity": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"max_observed_severity_with_ignored": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"state": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"system_tags": {
				Type:     schema.TypeMap,
				Computed: true,
				Elem:     schema.TypeString,
			},
			"time_created": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"time_updated": {
				Type:     schema.TypeString,
				Computed: true,
			},
			"vulnerabilities": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						// Required

						// Optional

						// Computed
						"cvss_v2score": {
							Type:     schema.TypeFloat,
							Computed: true,
						},
						"cvss_v3score": {
							Type:     schema.TypeFloat,
							Computed: true,
						},
						"id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"is_false_positive": {
							Type:     schema.TypeBool,
							Computed: true,
						},
						"is_ignored": {
							Type:     schema.TypeBool,
							Computed: true,
						},
						"severity": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"source": {
							Type:     schema.TypeString,
							Computed: true,
						},
					},
				},
			},
			"vulnerable_artifacts_count": {
				Type:     schema.TypeInt,
				Computed: true,
			},
			"vulnerable_artifacts_count_with_ignored": {
				Type:     schema.TypeInt,
				Computed: true,
			},
		},
	}
}

func createAdmVulnerabilityAudit(d *schema.ResourceData, m interface{}) error {
	sync := &AdmVulnerabilityAuditResourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).ApplicationDependencyManagementClient()

	return tfresource.CreateResource(d, sync)
}

func readAdmVulnerabilityAudit(d *schema.ResourceData, m interface{}) error {
	sync := &AdmVulnerabilityAuditResourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).ApplicationDependencyManagementClient()

	return tfresource.ReadResource(sync)
}

func updateAdmVulnerabilityAudit(d *schema.ResourceData, m interface{}) error {
	sync := &AdmVulnerabilityAuditResourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).ApplicationDependencyManagementClient()

	return tfresource.UpdateResource(d, sync)
}

func deleteAdmVulnerabilityAudit(d *schema.ResourceData, m interface{}) error {
	sync := &AdmVulnerabilityAuditResourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).ApplicationDependencyManagementClient()
	sync.DisableNotFoundRetries = true

	return tfresource.DeleteResource(d, sync)
}

type AdmVulnerabilityAuditResourceCrud struct {
	tfresource.BaseCrud
	Client                 *oci_adm.ApplicationDependencyManagementClient
	Res                    *oci_adm.VulnerabilityAudit
	DisableNotFoundRetries bool
}

func (s *AdmVulnerabilityAuditResourceCrud) ID() string {
	return *s.Res.Id
}

func (s *AdmVulnerabilityAuditResourceCrud) CreatedPending() []string {
	return []string{
		string(oci_adm.VulnerabilityAuditLifecycleStateCreating),
	}
}

func (s *AdmVulnerabilityAuditResourceCrud) CreatedTarget() []string {
	return []string{
		string(oci_adm.VulnerabilityAuditLifecycleStateActive),
	}
}

func (s *AdmVulnerabilityAuditResourceCrud) DeletedPending() []string {
	return []string{
		string(oci_adm.VulnerabilityAuditLifecycleStateDeleting),
	}
}

func (s *AdmVulnerabilityAuditResourceCrud) DeletedTarget() []string {
	return []string{
		string(oci_adm.VulnerabilityAuditLifecycleStateDeleted),
	}
}

func (s *AdmVulnerabilityAuditResourceCrud) Create() error {
	request := oci_adm.CreateVulnerabilityAuditRequest{}

	if applicationDependencies, ok := s.D.GetOkExists("application_dependencies"); ok {
		interfaces := applicationDependencies.([]interface{})
		tmp := make([]oci_adm.ApplicationDependency, len(interfaces))
		for i := range interfaces {
			stateDataIndex := i
			fieldKeyFormat := fmt.Sprintf("%s.%d.%%s", "application_dependencies", stateDataIndex)
			converted, err := s.mapToApplicationDependency(fieldKeyFormat)
			if err != nil {
				return err
			}
			tmp[i] = converted
		}
		if len(tmp) != 0 || s.D.HasChange("application_dependencies") {
			request.ApplicationDependencies = tmp
		}
	}

	if buildType, ok := s.D.GetOkExists("build_type"); ok {
		request.BuildType = oci_adm.VulnerabilityAuditBuildTypeEnum(buildType.(string))
	}

	if compartmentId, ok := s.D.GetOkExists("compartment_id"); ok {
		tmp := compartmentId.(string)
		request.CompartmentId = &tmp
	}

	if configuration, ok := s.D.GetOkExists("configuration"); ok {
		if tmpList := configuration.([]interface{}); len(tmpList) > 0 {
			fieldKeyFormat := fmt.Sprintf("%s.%d.%%s", "configuration", 0)
			tmp, err := s.mapToVulnerabilityAuditConfiguration(fieldKeyFormat)
			if err != nil {
				return err
			}
			request.Configuration = &tmp
		}
	}

	if definedTags, ok := s.D.GetOkExists("defined_tags"); ok {
		convertedDefinedTags, err := tfresource.MapToDefinedTags(definedTags.(map[string]interface{}))
		if err != nil {
			return err
		}
		request.DefinedTags = convertedDefinedTags
	}

	if displayName, ok := s.D.GetOkExists("display_name"); ok {
		tmp := displayName.(string)
		request.DisplayName = &tmp
	}

	if freeformTags, ok := s.D.GetOkExists("freeform_tags"); ok {
		request.FreeformTags = tfresource.ObjectMapToStringMap(freeformTags.(map[string]interface{}))
	}

	if knowledgeBaseId, ok := s.D.GetOkExists("knowledge_base_id"); ok {
		tmp := knowledgeBaseId.(string)
		request.KnowledgeBaseId = &tmp
	}

	if source, ok := s.D.GetOkExists("source"); ok {
		if tmpList := source.([]interface{}); len(tmpList) > 0 {
			fieldKeyFormat := fmt.Sprintf("%s.%d.%%s", "source", 0)
			tmp, err := s.mapToVulnerabilityAuditSource(fieldKeyFormat)
			if err != nil {
				return err
			}
			request.Source = tmp
		}
	}

	if usageData, ok := s.D.GetOkExists("usage_data"); ok {
		if tmpList := usageData.([]interface{}); len(tmpList) > 0 {
			fieldKeyFormat := fmt.Sprintf("%s.%d.%%s", "usage_data", 0)
			tmp, err := s.mapToUsageDataDetails(fieldKeyFormat)
			if err != nil {
				return err
			}
			request.UsageData = tmp
		}
	}

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "adm")

	response, err := s.Client.CreateVulnerabilityAudit(context.Background(), request)
	if err != nil {
		return err
	}

	s.Res = &response.VulnerabilityAudit
	return nil
}

func (s *AdmVulnerabilityAuditResourceCrud) Get() error {
	request := oci_adm.GetVulnerabilityAuditRequest{}

	tmp := s.D.Id()
	request.VulnerabilityAuditId = &tmp

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "adm")

	response, err := s.Client.GetVulnerabilityAudit(context.Background(), request)
	if err != nil {
		return err
	}

	s.Res = &response.VulnerabilityAudit
	return nil
}

func (s *AdmVulnerabilityAuditResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
		oldRaw, newRaw := s.D.GetChange("compartment_id")
		if newRaw != "" && oldRaw != "" {
			err := s.updateCompartment(compartment)
			if err != nil {
				return err
			}
		}
	}
	request := oci_adm.UpdateVulnerabilityAuditRequest{}

	if definedTags, ok := s.D.GetOkExists("defined_tags"); ok {
		convertedDefinedTags, err := tfresource.MapToDefinedTags(definedTags.(map[string]interface{}))
		if err != nil {
			return err
		}
		request.DefinedTags = convertedDefinedTags
	}

	if displayName, ok := s.D.GetOkExists("display_name"); ok {
		tmp := displayName.(string)
		request.DisplayName = &tmp
	}

	if freeformTags, ok := s.D.GetOkExists("freeform_tags"); ok {
		request.FreeformTags = tfresource.ObjectMapToStringMap(freeformTags.(map[string]interface{}))
	}

	tmp := s.D.Id()
	request.VulnerabilityAuditId = &tmp

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "adm")

	response, err := s.Client.UpdateVulnerabilityAudit(context.Background(), request)
	if err != nil {
		return err
	}

	s.Res = &response.VulnerabilityAudit
	return nil
}

func (s *AdmVulnerabilityAuditResourceCrud) Delete() error {
	request := oci_adm.DeleteVulnerabilityAuditRequest{}

	tmp := s.D.Id()
	request.VulnerabilityAuditId = &tmp

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "adm")

	_, err := s.Client.DeleteVulnerabilityAudit(context.Background(), request)
	return err
}

func (s *AdmVulnerabilityAuditResourceCrud) SetData() error {
	s.D.Set("build_type", s.Res.BuildType)

	if s.Res.CompartmentId != nil {
		s.D.Set("compartment_id", *s.Res.CompartmentId)
	}

	if s.Res.Configuration != nil {
		s.D.Set("configuration", []interface{}{VulnerabilityAuditConfigurationToMap(s.Res.Configuration)})
	} else {
		s.D.Set("configuration", nil)
	}

	if s.Res.DefinedTags != nil {
		s.D.Set("defined_tags", tfresource.DefinedTagsToMap(s.Res.DefinedTags))
	}

	if s.Res.DisplayName != nil {
		s.D.Set("display_name", *s.Res.DisplayName)
	}

	s.D.Set("freeform_tags", s.Res.FreeformTags)

	if s.Res.IsSuccess != nil {
		s.D.Set("is_success", *s.Res.IsSuccess)
	}

	if s.Res.KnowledgeBaseId != nil {
		s.D.Set("knowledge_base_id", *s.Res.KnowledgeBaseId)
	}

	s.D.Set("lifecycle_details", s.Res.LifecycleDetails)

	if s.Res.MaxObservedCvssV2Score != nil {
		s.D.Set("max_observed_cvss_v2score", *s.Res.MaxObservedCvssV2Score)
	}

	if s.Res.MaxObservedCvssV2ScoreWithIgnored != nil {
		s.D.Set("max_observed_cvss_v2score_with_ignored", *s.Res.MaxObservedCvssV2ScoreWithIgnored)
	}

	if s.Res.MaxObservedCvssV3Score != nil {
		s.D.Set("max_observed_cvss_v3score", *s.Res.MaxObservedCvssV3Score)
	}

	if s.Res.MaxObservedCvssV3ScoreWithIgnored != nil {
		s.D.Set("max_observed_cvss_v3score_with_ignored", *s.Res.MaxObservedCvssV3ScoreWithIgnored)
	}

	s.D.Set("max_observed_severity", s.Res.MaxObservedSeverity)

	s.D.Set("max_observed_severity_with_ignored", s.Res.MaxObservedSeverityWithIgnored)

	if s.Res.Source != nil {
		sourceArray := []interface{}{}
		if sourceMap := VulnerabilityAuditSourceToMap(&s.Res.Source); sourceMap != nil {
			sourceArray = append(sourceArray, sourceMap)
		}
		s.D.Set("source", sourceArray)
	} else {
		s.D.Set("source", nil)
	}

	s.D.Set("state", s.Res.LifecycleState)

	if s.Res.SystemTags != nil {
		s.D.Set("system_tags", tfresource.SystemTagsToMap(s.Res.SystemTags))
	}

	if s.Res.TimeCreated != nil {
		s.D.Set("time_created", s.Res.TimeCreated.String())
	}

	if s.Res.TimeUpdated != nil {
		s.D.Set("time_updated", s.Res.TimeUpdated.String())
	}

	if s.Res.UsageData != nil {
		usageDataArray := []interface{}{}
		if usageDataMap := UsageDataDetailsToMap(&s.Res.UsageData); usageDataMap != nil {
			usageDataArray = append(usageDataArray, usageDataMap)
		}
		s.D.Set("usage_data", usageDataArray)
	} else {
		s.D.Set("usage_data", nil)
	}

	vulnerabilities := []interface{}{}
	for _, item := range s.Res.Vulnerabilities {
		vulnerabilities = append(vulnerabilities, VulnerabilityToMap(item))
	}
	s.D.Set("vulnerabilities", vulnerabilities)

	if s.Res.VulnerableArtifactsCount != nil {
		s.D.Set("vulnerable_artifacts_count", *s.Res.VulnerableArtifactsCount)
	}

	if s.Res.VulnerableArtifactsCountWithIgnored != nil {
		s.D.Set("vulnerable_artifacts_count_with_ignored", *s.Res.VulnerableArtifactsCountWithIgnored)
	}

	return nil
}

func (s *AdmVulnerabilityAuditResourceCrud) mapToApplicationDependency(fieldKeyFormat string) (oci_adm.ApplicationDependency, error) {
	result := oci_adm.ApplicationDependency{}

	if applicationDependencyNodeIds, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "application_dependency_node_ids")); ok {
		interfaces := applicationDependencyNodeIds.([]interface{})
		tmp := make([]string, len(interfaces))
		for i := range interfaces {
			if interfaces[i] != nil {
				tmp[i] = interfaces[i].(string)
			}
		}
		if len(tmp) != 0 || s.D.HasChange(fmt.Sprintf(fieldKeyFormat, "application_dependency_node_ids")) {
			result.ApplicationDependencyNodeIds = tmp
		}
	}

	if gav, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "gav")); ok {
		tmp := gav.(string)
		result.Gav = &tmp
	}

	if nodeId, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "node_id")); ok {
		tmp := nodeId.(string)
		result.NodeId = &tmp
	}

	if purl, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "purl")); ok {
		tmp := purl.(string)
		result.Purl = &tmp
	}

	return result, nil
}

func ApplicationDependencyToMap(obj oci_adm.ApplicationDependency) map[string]interface{} {
	result := map[string]interface{}{}

	result["application_dependency_node_ids"] = obj.ApplicationDependencyNodeIds

	if obj.Gav != nil {
		result["gav"] = string(*obj.Gav)
	}

	if obj.NodeId != nil {
		result["node_id"] = string(*obj.NodeId)
	}

	if obj.Purl != nil {
		result["purl"] = string(*obj.Purl)
	}

	return result
}

func (s *AdmVulnerabilityAuditResourceCrud) mapToUsageDataDetails(fieldKeyFormat string) (oci_adm.UsageDataDetails, error) {
	var baseObject oci_adm.UsageDataDetails
	//discriminator
	sourceTypeRaw, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "source_type"))
	var sourceType string
	if ok {
		sourceType = sourceTypeRaw.(string)
	} else {
		sourceType = "" // default value
	}
	switch strings.ToLower(sourceType) {
	case strings.ToLower("objectStorageTuple"):
		details := oci_adm.UsageDataViaObjectStorageTupleDetails{}
		if bucket, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "bucket")); ok {
			tmp := bucket.(string)
			details.BucketName = &tmp
		}
		if namespace, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "namespace")); ok {
			tmp := namespace.(string)
			details.NamespaceName = &tmp
		}
		if object, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "object")); ok {
			tmp := object.(string)
			details.ObjectName = &tmp
		}
		baseObject = details
	default:
		return nil, fmt.Errorf("unknown source_type '%v' was specified", sourceType)
	}
	return baseObject, nil
}

func UsageDataDetailsToMap(obj *oci_adm.UsageDataDetails) map[string]interface{} {
	result := map[string]interface{}{}
	switch v := (*obj).(type) {
	case oci_adm.UsageDataViaObjectStorageTupleDetails:
		result["source_type"] = "objectStorageTuple"

		if v.BucketName != nil {
			result["bucket"] = string(*v.BucketName)
		}

		if v.NamespaceName != nil {
			result["namespace"] = string(*v.NamespaceName)
		}

		if v.ObjectName != nil {
			result["object"] = string(*v.ObjectName)
		}
	default:
		log.Printf("[WARN] Received 'source_type' of unknown type %v", *obj)
		return nil
	}

	return result
}

func VulnerabilityToMap(obj oci_adm.Vulnerability) map[string]interface{} {
	result := map[string]interface{}{}

	if obj.CvssV2Score != nil {
		result["cvss_v2score"] = float32(*obj.CvssV2Score)
	}

	if obj.CvssV3Score != nil {
		result["cvss_v3score"] = float32(*obj.CvssV3Score)
	}

	if obj.Id != nil {
		result["id"] = string(*obj.Id)
	}

	if obj.IsFalsePositive != nil {
		result["is_false_positive"] = bool(*obj.IsFalsePositive)
	}

	if obj.IsIgnored != nil {
		result["is_ignored"] = bool(*obj.IsIgnored)
	}

	result["severity"] = string(obj.Severity)

	if obj.Source != nil {
		result["source"] = string(*obj.Source)
	}

	return result
}

func (s *AdmVulnerabilityAuditResourceCrud) mapToVulnerabilityAuditConfiguration(fieldKeyFormat string) (oci_adm.VulnerabilityAuditConfiguration, error) {
	result := oci_adm.VulnerabilityAuditConfiguration{}

	if exclusions, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "exclusions")); ok {
		interfaces := exclusions.([]interface{})
		tmp := make([]string, len(interfaces))
		for i := range interfaces {
			if interfaces[i] != nil {
				tmp[i] = interfaces[i].(string)
			}
		}
		if len(tmp) != 0 || s.D.HasChange(fmt.Sprintf(fieldKeyFormat, "exclusions")) {
			result.Exclusions = tmp
		}
	}

	if maxPermissibleCvssV2Score, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "max_permissible_cvss_v2score")); ok {
		tmp := float32(maxPermissibleCvssV2Score.(float64))
		result.MaxPermissibleCvssV2Score = &tmp
	}

	if maxPermissibleCvssV3Score, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "max_permissible_cvss_v3score")); ok {
		tmp := float32(maxPermissibleCvssV3Score.(float64))
		result.MaxPermissibleCvssV3Score = &tmp
	}

	if maxPermissibleSeverity, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "max_permissible_severity")); ok {
		result.MaxPermissibleSeverity = oci_adm.ConfigSeverityEnum(maxPermissibleSeverity.(string))
	}

	return result, nil
}

func VulnerabilityAuditConfigurationToMap(obj *oci_adm.VulnerabilityAuditConfiguration) map[string]interface{} {
	result := map[string]interface{}{}

	result["exclusions"] = obj.Exclusions

	if obj.MaxPermissibleCvssV2Score != nil {
		result["max_permissible_cvss_v2score"] = float32(*obj.MaxPermissibleCvssV2Score)
	}

	if obj.MaxPermissibleCvssV3Score != nil {
		result["max_permissible_cvss_v3score"] = float32(*obj.MaxPermissibleCvssV3Score)
	}

	result["max_permissible_severity"] = string(obj.MaxPermissibleSeverity)

	return result
}

func (s *AdmVulnerabilityAuditResourceCrud) mapToVulnerabilityAuditSource(fieldKeyFormat string) (oci_adm.VulnerabilityAuditSource, error) {
	var baseObject oci_adm.VulnerabilityAuditSource
	//discriminator
	typeRaw, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "type"))
	var type_ string
	if ok {
		type_ = typeRaw.(string)
	} else {
		type_ = "" // default value
	}
	switch strings.ToLower(type_) {
	case strings.ToLower("EXTERNAL_RESOURCE"):
		details := oci_adm.ExternalResourceVulnerabilityAuditSource{}
		if description, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "description")); ok {
			tmp := description.(string)
			details.Description = &tmp
		}
		baseObject = details
	case strings.ToLower("OCI_RESOURCE"):
		details := oci_adm.OciResourceVulnerabilityAuditSource{}
		if ociResourceId, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "oci_resource_id")); ok {
			tmp := ociResourceId.(string)
			details.OciResourceId = &tmp
		}
		baseObject = details
	case strings.ToLower("UNKNOWN"):
		details := oci_adm.UnknownSourceVulnerabilityAuditSource{}
		baseObject = details
	default:
		return nil, fmt.Errorf("unknown type '%v' was specified", type_)
	}
	return baseObject, nil
}

func VulnerabilityAuditSourceToMap(obj *oci_adm.VulnerabilityAuditSource) map[string]interface{} {
	result := map[string]interface{}{}
	switch v := (*obj).(type) {
	case oci_adm.ExternalResourceVulnerabilityAuditSource:
		result["type"] = "EXTERNAL_RESOURCE"

		if v.Description != nil {
			result["description"] = string(*v.Description)
		}
	case oci_adm.OciResourceVulnerabilityAuditSource:
		result["type"] = "OCI_RESOURCE"

		if v.OciResourceId != nil {
			result["oci_resource_id"] = string(*v.OciResourceId)
		}
	case oci_adm.UnknownSourceVulnerabilityAuditSource:
		result["type"] = "UNKNOWN"
	default:
		log.Printf("[WARN] Received 'type' of unknown type %v", *obj)
		return nil
	}

	return result
}

func VulnerabilityAuditSummaryToMap(obj oci_adm.VulnerabilityAuditSummary) map[string]interface{} {
	result := map[string]interface{}{}

	result["build_type"] = string(obj.BuildType)

	if obj.CompartmentId != nil {
		result["compartment_id"] = string(*obj.CompartmentId)
	}

	if obj.DefinedTags != nil {
		result["defined_tags"] = tfresource.DefinedTagsToMap(obj.DefinedTags)
	}

	if obj.DisplayName != nil {
		result["display_name"] = string(*obj.DisplayName)
	}

	result["freeform_tags"] = obj.FreeformTags

	if obj.Id != nil {
		result["id"] = string(*obj.Id)
	}

	if obj.IsSuccess != nil {
		result["is_success"] = bool(*obj.IsSuccess)
	}

	if obj.KnowledgeBaseId != nil {
		result["knowledge_base_id"] = string(*obj.KnowledgeBaseId)
	}

	if obj.MaxObservedCvssV2Score != nil {
		result["max_observed_cvss_v2score"] = float32(*obj.MaxObservedCvssV2Score)
	}

	if obj.MaxObservedCvssV2ScoreWithIgnored != nil {
		result["max_observed_cvss_v2score_with_ignored"] = float32(*obj.MaxObservedCvssV2ScoreWithIgnored)
	}

	if obj.MaxObservedCvssV3Score != nil {
		result["max_observed_cvss_v3score"] = float32(*obj.MaxObservedCvssV3Score)
	}

	if obj.MaxObservedCvssV3ScoreWithIgnored != nil {
		result["max_observed_cvss_v3score_with_ignored"] = float32(*obj.MaxObservedCvssV3ScoreWithIgnored)
	}

	result["max_observed_severity"] = string(obj.MaxObservedSeverity)

	result["max_observed_severity_with_ignored"] = string(obj.MaxObservedSeverityWithIgnored)

	result["state"] = string(obj.LifecycleState)

	if obj.SystemTags != nil {
		result["system_tags"] = tfresource.SystemTagsToMap(obj.SystemTags)
	}

	if obj.TimeCreated != nil {
		result["time_created"] = obj.TimeCreated.String()
	}

	if obj.TimeUpdated != nil {
		result["time_updated"] = obj.TimeUpdated.String()
	}

	if obj.VulnerableArtifactsCount != nil {
		result["vulnerable_artifacts_count"] = int(*obj.VulnerableArtifactsCount)
	}

	if obj.VulnerableArtifactsCountWithIgnored != nil {
		result["vulnerable_artifacts_count_with_ignored"] = int(*obj.VulnerableArtifactsCountWithIgnored)
	}

	return result
}

func (s *AdmVulnerabilityAuditResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_adm.ChangeVulnerabilityAuditCompartmentRequest{}

	compartmentTmp := compartment.(string)
	changeCompartmentRequest.CompartmentId = &compartmentTmp

	idTmp := s.D.Id()
	changeCompartmentRequest.VulnerabilityAuditId = &idTmp

	changeCompartmentRequest.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "adm")

	_, err := s.Client.ChangeVulnerabilityAuditCompartment(context.Background(), changeCompartmentRequest)
	if err != nil {
		return err
	}

	if waitErr := tfresource.WaitForUpdatedState(s.D, s); waitErr != nil {
		return waitErr
	}

	return nil
}
