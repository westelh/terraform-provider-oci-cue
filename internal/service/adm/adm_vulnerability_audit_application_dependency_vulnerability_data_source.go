// Copyright (c) 2017, 2024, Oracle and/or its affiliates. All rights reserved.
// Licensed under the Mozilla Public License v2.0

package adm

import (
	"context"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	oci_adm "github.com/oracle/oci-go-sdk/v65/adm"

	"github.com/westelh/terraform-provider-oci-cue/internal/client"
	"github.com/westelh/terraform-provider-oci-cue/internal/tfresource"
)

func AdmVulnerabilityAuditApplicationDependencyVulnerabilityDataSource() *schema.Resource {
	return &schema.Resource{
		Read: readSingularAdmVulnerabilityAuditApplicationDependencyVulnerability,
		Schema: map[string]*schema.Schema{
			"cvss_v2greater_than_or_equal": {
				Type:     schema.TypeFloat,
				Optional: true,
			},
			"cvss_v3greater_than_or_equal": {
				Type:     schema.TypeFloat,
				Optional: true,
			},
			"severity_greater_than_or_equal": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"depth": {
				Type:     schema.TypeInt,
				Optional: true,
			},
			"gav": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"purl": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"root_node_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"vulnerability_audit_id": {
				Type:     schema.TypeString,
				Required: true,
			},
			"vulnerability_id": {
				Type:     schema.TypeString,
				Optional: true,
			},
			"sort_by": {
				Type:     schema.TypeString,
				Optional: true,
			},
			// Computed
			"items": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						// Required

						// Optional

						// Computed
						"application_dependency_node_ids": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Schema{
								Type: schema.TypeString,
							},
						},
						"gav": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"purl": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"is_found_in_knowledge_base": {
							Type:     schema.TypeBool,
							Computed: true,
						},
						"node_id": {
							Type:     schema.TypeString,
							Computed: true,
						},
						"vulnerabilities": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									// Required

									// Optional

									// Computed
									"cvss_v2score": {
										Type:     schema.TypeFloat,
										Computed: true,
									},
									"cvss_v3score": {
										Type:     schema.TypeFloat,
										Computed: true,
									},
									"severity": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"id": {
										Type:     schema.TypeString,
										Computed: true,
									},
									"is_ignored": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"is_false_positive": {
										Type:     schema.TypeBool,
										Computed: true,
									},
									"source": {
										Type:     schema.TypeString,
										Computed: true,
									},
								},
							},
						},
					},
				},
			},
		},
		DeprecationMessage: tfresource.DatasourceDeprecatedForAnother("oci_adm_vulnerability_audit_application_dependency_vulnerability", "oci_adm_vulnerability_audit_application_dependency_vulnerabilities"),
	}
}

func readSingularAdmVulnerabilityAuditApplicationDependencyVulnerability(d *schema.ResourceData, m interface{}) error {
	sync := &AdmVulnerabilityAuditApplicationDependencyVulnerabilityDataSourceCrud{}
	sync.D = d
	sync.Client = m.(*client.OracleClients).ApplicationDependencyManagementClient()

	return tfresource.ReadResource(sync)
}

type AdmVulnerabilityAuditApplicationDependencyVulnerabilityDataSourceCrud struct {
	D      *schema.ResourceData
	Client *oci_adm.ApplicationDependencyManagementClient
	Res    *oci_adm.ListApplicationDependencyVulnerabilitiesResponse
}

func (s *AdmVulnerabilityAuditApplicationDependencyVulnerabilityDataSourceCrud) VoidState() {
	s.D.SetId("")
}

func (s *AdmVulnerabilityAuditApplicationDependencyVulnerabilityDataSourceCrud) Get() error {
	request := oci_adm.ListApplicationDependencyVulnerabilitiesRequest{}

	if cvssV2GreaterThanOrEqual, ok := s.D.GetOkExists("cvss_v2greater_than_or_equal"); ok {
		tmp := float32(cvssV2GreaterThanOrEqual.(float64))
		request.CvssV2GreaterThanOrEqual = &tmp
	}

	if cvssV3GreaterThanOrEqual, ok := s.D.GetOkExists("cvss_v3greater_than_or_equal"); ok {
		tmp := float32(cvssV3GreaterThanOrEqual.(float64))
		request.CvssV3GreaterThanOrEqual = &tmp
	}

	if severityGreaterThanOrEqual, ok := s.D.GetOkExists("severity_greater_than_or_equal"); ok {
		request.SeverityGreaterThanOrEqual = oci_adm.ListApplicationDependencyVulnerabilitiesSeverityGreaterThanOrEqualEnum(severityGreaterThanOrEqual.(string))
	}

	if sortBy, ok := s.D.GetOkExists("sort_by"); ok {
		tmp := sortBy.(string)
		request.SortBy = oci_adm.ListApplicationDependencyVulnerabilitiesSortByEnum(tmp)
	}

	if depth, ok := s.D.GetOkExists("depth"); ok {
		tmp := depth.(int)
		request.Depth = &tmp
	}

	if gav, ok := s.D.GetOkExists("gav"); ok {
		tmp := gav.(string)
		request.Gav = &tmp
	}

	if purl, ok := s.D.GetOkExists("purl"); ok {
		tmp := purl.(string)
		request.Purl = &tmp
	}

	if rootNodeId, ok := s.D.GetOkExists("root_node_id"); ok {
		tmp := rootNodeId.(string)
		request.RootNodeId = &tmp
	}

	if vulnerabilityAuditId, ok := s.D.GetOkExists("vulnerability_audit_id"); ok {
		tmp := vulnerabilityAuditId.(string)
		request.VulnerabilityAuditId = &tmp
	}

	if vulnerabilityId, ok := s.D.GetOkExists("vulnerability_id"); ok {
		tmp := vulnerabilityId.(string)
		request.VulnerabilityId = &tmp
	}

	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(false, "adm")

	response, err := s.Client.ListApplicationDependencyVulnerabilities(context.Background(), request)
	if err != nil {
		return err
	}

	s.Res = &response
	return nil
}

func (s *AdmVulnerabilityAuditApplicationDependencyVulnerabilityDataSourceCrud) SetData() error {
	if s.Res == nil {
		return nil
	}

	s.D.SetId(tfresource.GenerateDataSourceHashID("AdmVulnerabilityAuditApplicationDependencyVulnerabilityDataSource-", AdmVulnerabilityAuditApplicationDependencyVulnerabilityDataSource(), s.D))

	items := []interface{}{}
	for _, item := range s.Res.Items {
		items = append(items, ApplicationDependencyVulnerabilitySummaryToMap(item))
	}
	err := s.D.Set("items", items)
	if err != nil {
		return err
	}

	return nil
}

func ApplicationDependencyVulnerabilitySummaryToMap(obj oci_adm.ApplicationDependencyVulnerabilitySummary) map[string]interface{} {
	result := map[string]interface{}{}

	result["application_dependency_node_ids"] = obj.ApplicationDependencyNodeIds

	if obj.Gav != nil {
		result["gav"] = string(*obj.Gav)
	}

	if obj.Purl != nil {
		result["purl"] = string(*obj.Purl)
	}

	if obj.IsFoundInKnowledgeBase != nil {
		result["is_found_in_knowledge_base"] = bool(*obj.IsFoundInKnowledgeBase)
	}

	if obj.NodeId != nil {
		result["node_id"] = string(*obj.NodeId)
	}

	vulnerabilities := []interface{}{}
	for _, item := range obj.Vulnerabilities {
		vulnerabilities = append(vulnerabilities, VulnerabilityToMap(item))
	}
	result["vulnerabilities"] = vulnerabilities

	return result
}
